// MIT Licensed (see LICENSE.md).

#pragma once

namespace Zero
{

class AddMaterialJob;
class AddMeshJob;
class AddShadersJob;
class AddTextureJob;
class Atlas;
class BlendSettings;
class Bone;
class Camera;
class CreateRendererJob;
class DepthSettings;
class DestroyRendererJob;
class DoRenderTasksJob;
class FrameBlock;
class FrameNode;
class GetTextureDataJob;
class Graphical;
class GraphicalEntry;
class GraphicalEntryData;
class GraphicalSortEvent;
class GraphicsEngine;
class GraphicsSpace;
class HeightMapModel;
class Material;
class MaterialBlock;
class MaterialFactory;
class MaterialManager;
class MaterialRenderData;
class Mesh;
class MeshRenderData;
class Model;
class MultiRenderTarget;
class MultiSprite;
class Particle;
class ParticleAnimator;
class ParticleEmitter;
class ParticleSystem;
class RemoveMaterialJob;
class RemoveMeshJob;
class RemoveTextureJob;
class RemoveShadersJob;
class Renderer;
class RendererJob;
class RendererJobQueue;
class RenderGroup;
class RenderGroupManager;
class RenderQueues;
class RenderSettings;
class RenderTarget;
class RenderTargetManager;
class RenderTask;
class RenderTaskBackBufferBlit;
class RenderTaskBuffer;
class RenderTaskClearTarget;
class RenderTaskPostProcess;
class RenderTaskRange;
class RenderTaskRenderPass;
class RenderTasks;
class RenderTasksEvent;
class RenderTasksUpdateData;
class SamplerSettings;
class SaveImageToFileJob;
class ScreenViewport;
class SelectionIcon;
class SetLazyShaderCompilationJob;
class SetVSyncJob;
class ShaderInputsEvent;
class ShowProgressJob;
class Skeleton;
class Sprite;
class SpriteSource;
class StreamedVertex;
class SubRenderGroupPass;
class Texture;
class TextureData;
class TextureLoader;
class TextureManager;
class TextureRenderData;
class ViewBlock;
class ViewNode;
class ViewportInterface;
class ZilchFragment;
class ZilchShaderGenerator;

} // namespace Zero
