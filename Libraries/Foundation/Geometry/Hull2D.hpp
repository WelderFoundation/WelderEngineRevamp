// MIT Licensed (see LICENSE.md).
#pragma once

namespace Geometry
{

class Hull2D
{

  typedef Zero::Array<Vec2> Vec2Array;
  typedef Zero::Array<uint> IndexArray;

public:
  Hull2D(void);
  Hull2D(const Vec2Ptr vertices, uint count);
  Hull2D(const Vec3Ptr vertices, uint count);
  ~Hull2D(void);

  /// Builds the convex hull from the set of 2D points.
  void Build(const Vec2Ptr vertices, uint count);

  /// Builds the convex hull from the set of 3D points. All of the points are
  /// assumed to be on a plane and only the x and y components of the vectors
  /// are considered.
  void Build(const Vec3Ptr vertices, uint count);

  /// Get the points that were generated by the call to the Build function.
  /// Points are given in clockwise order.
  uint GetPoints(Vec2Ptr* vertices);

  void DebugBuildStart(const Vec3Ptr vertices, uint count);
  void DebugBuildStep(void);

  void Draw(void) const;

private:
  Vec2Array mPoints;
  IndexArray mHull;
  IndexArray mPositivePoints;
  IndexArray mNegativePoints;
  uint mDebugStep;
  uint mDebugCounter;
  IndexArray mDebugArray;
  bool mUsingDebug;

  void InitializeBuild(uint count);
  void CopyPoints(const Vec2Ptr points, uint count);
  void CopyPoints(const Vec3Ptr points, uint count);
  void SortPoints(void);
  void ClassifyPoints(void);
  void ComputePositiveHalfHull(void);
  void ComputeNegativeHalfHull(void);
  void MergeHalves(void);
  void SortHullPoints(void);
  real ConvexCheck(const IndexArray& points);
};

} // namespace Geometry
