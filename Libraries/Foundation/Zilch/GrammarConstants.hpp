// MIT Licensed (see LICENSE.md).

#pragma once
#ifndef ZILCH_GRAMMAR_CONSTANTS_HPP
#  define ZILCH_GRAMMAR_CONSTANTS_HPP

namespace Zilch
{
// All the symbol constants in the language
namespace Grammar
{
enum Enum
{
  Invalid = -1,
  End = 0,
  Error = 1,
  Whitespace = 2,
  UpperIdentifier = 3,
  LowerIdentifier = 4,
  IntegerLiteral = 5,
  DoubleIntegerLiteral = 6,
  RealLiteral = 7,
  DoubleRealLiteral = 8,
  CharacterLiteral = 9,
  StringLiteral = 10,
  BeginStringInterpolate = 11,
  EndStringInterpolate = 12,
  EndBeginStringInterpolate = 13,
  Abstract = 14,
  Alias = 15,
  Alignof = 16,
  Assert = 17,
  Auto = 18,
  Case = 19,
  Catch = 20,
  Checked = 21,
  Const = 22,
  Default = 23,
  Dynamic = 24,
  Explicit = 25,
  Export = 26,
  Extern = 27,
  Finally = 28,
  Fixed = 29,
  Friend = 30,
  Global = 31,
  Goto = 32,
  Immutable = 33,
  Implicit = 34,
  Import = 35,
  In = 36,
  Include = 37,
  Inline = 38,
  Interface = 39,
  Internal = 40,
  Is = 41,
  Local = 42,
  Lock = 43,
  Module = 44,
  Mutable = 45,
  Namespace = 46,
  Operator = 47,
  Out = 48,
  Override = 49,
  Package = 50,
  Params = 51,
  Partial = 52,
  Positional = 53,
  Private = 54,
  Protected = 55,
  Public = 56,
  Readonly = 57,
  Register = 58,
  Require = 59,
  Scope = 60,
  Sealed = 61,
  Signed = 62,
  Sizeof = 63,
  Stackalloc = 64,
  Static = 65,
  Switch = 66,
  Timeout = 67,
  Try = 68,
  Typedef = 69,
  Typename = 70,
  Unchecked = 71,
  Unsafe = 72,
  Unsigned = 73,
  Using = 74,
  Virtual = 75,
  Volatile = 76,
  Where = 77,
  Yield = 78,
  Any = 79,
  And = 80,
  As = 81,
  Base = 82,
  Break = 83,
  Class = 84,
  Constructor = 85,
  Continue = 86,
  Debug = 87,
  Delegate = 88,
  Delete = 89,
  Destructor = 90,
  Do = 91,
  Else = 92,
  Enumeration = 93,
  False = 94,
  Flags = 95,
  For = 96,
  ForEach = 97,
  Function = 98,
  Get = 99,
  If = 100,
  Loop = 101,
  MemberId = 102,
  New = 103,
  Not = 104,
  Null = 105,
  Or = 106,
  Ref = 107,
  Return = 108,
  Sends = 109,
  Set = 110,
  Struct = 111,
  Throw = 112,
  True = 113,
  TypeId = 114,
  Typeof = 115,
  Variable = 116,
  While = 117,
  Access = 118,
  DynamicAccess = 119,
  NonVirtualAccess = 120,
  TypeSpecifier = 121,
  NameSpecifier = 121,
  Inheritance = 121,
  InitializerList = 121,
  ArgumentSeparator = 122,
  RefersTo = 123,
  Assignment = 124,
  AssignmentSubtract = 125,
  AssignmentAdd = 126,
  AssignmentDivide = 127,
  AssignmentMultiply = 128,
  AssignmentModulo = 129,
  AssignmentExponent = 130,
  AssignmentLeftShift = 131,
  AssignmentRightShift = 132,
  AssignmentBitwiseXor = 133,
  AssignmentBitwiseOr = 134,
  AssignmentBitwiseAnd = 135,
  Equality = 136,
  Inequality = 137,
  LessThan = 138,
  LessThanOrEqualTo = 139,
  GreaterThan = 140,
  GreaterThanOrEqualTo = 141,
  Negative = 142,
  Subtract = 142,
  Positive = 143,
  Add = 143,
  Divide = 144,
  Multiply = 145,
  Dereference = 145,
  Modulo = 146,
  Exponent = 147,
  Decrement = 148,
  Increment = 149,
  BitshiftLeft = 150,
  BitshiftRight = 151,
  BitwiseXor = 152,
  BitwiseOr = 153,
  BitwiseAnd = 154,
  AddressOf = 154,
  BitwiseNot = 155,
  PropertyDelegate = 156,
  LogicalOr = 157,
  LogicalAnd = 158,
  LogicalNot = 159,
  StatementSeparator = 160,
  BeginIndex = 161,
  BeginTemplate = 161,
  BeginAttribute = 161,
  OldBeginInitializer = 161,
  EndIndex = 162,
  EndTemplate = 162,
  EndAttribute = 162,
  OldEndInitializer = 162,
  BeginFunctionCall = 163,
  BeginFunctionParameters = 163,
  BeginGroup = 163,
  EndFunctionCall = 164,
  EndFunctionParameters = 164,
  EndGroup = 164,
  BeginScope = 165,
  BeginInitializer = 165,
  EndScope = 166,
  EndInitializer = 166,
  CommentLine = 167,
  CommentStart = 168,
  CommentEnd = 169,
  SymbolCount
};

// Gets the name of a given grammar constant
ZeroShared const String& GetName(Grammar::Enum value);

// Gets the keyword or symbol associated with a grammar constant, or returns the
// string 'Invalid'
ZeroShared const String& GetKeywordOrSymbol(Grammar::Enum value);

// Get a list of keywords used by Zilch (typically provided for syntax
// highlighting) If you need a list of words separated by spaces, you can use
// Zilch::JoinStrings
ZeroShared const Array<String>& GetUsedKeywords();

// Special keywords that only exist in certain contexts, (eg this, value...)
// If you need a list of words separated by spaces, you can use
// Zilch::JoinStrings
ZeroShared const Array<String>& GetSpecialKeywords();

// Get a list of keywords reserved by Zilch (these may not be used, but do
// nothing)
ZeroShared const Array<String>& GetReservedKeywords();
} // namespace Grammar
} // namespace Zilch

#endif
