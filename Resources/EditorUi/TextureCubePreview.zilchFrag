// MIT Licensed (see LICENSE.md).

[Pixel]
struct TextureCubePreview
{
  // Skybox texture
  [Input] var SpriteSource : SampledImageCube;
  
  // We use the Uv to determine the sample direction for the cube map
  [Input] var Uv : Real2;
  
  // XY is the mouse movement
  // Z is the zoom
  // W is the auto-rotate value
  [Input] var SkyboxPreviewInput : Real4;
  
  // Used to calculate LOD
  [Input] var TextureViewResolution : Real2;
  
  // Final color
  [Output] var Color : Real4 = Real4(1, 0, 1, 1);

  function Main()
  {
    // Build a direction vector from the UV
    var sampleDirection = Real3(this.Uv.X, 1.0 - this.Uv.Y, 0);
    sampleDirection -= Real3(0.5);
    sampleDirection.Z = -0.5 + -this.SkyboxPreviewInput.Z * 0.15;
    sampleDirection = Math.Normalize(sampleDirection);
    
    // Rotation around the Y
    var yRotate = this.SkyboxPreviewInput.W * 0.125 + -this.SkyboxPreviewInput.X * 0.005;
    var ySin = Math.Sin(yRotate);
    var yCos = Math.Cos(yRotate);
    var yRotateMatrix = Real4x4(yCos, 0, -ySin, 0, 0, 1, 0, 0, ySin, 0, yCos, 0, 0, 0, 0, 1);
    
    // Rotation around the X
    var xRotate = -this.SkyboxPreviewInput.Y * 0.005;
    var xSin = Math.Sin(xRotate);
    var xCos = Math.Cos(xRotate);
    var xRotateMatrix = Real4x4(1, 0, 0, 0, 0, xCos, xSin, 0, 0, -xSin, xCos, 0, 0, 0, 0, 1);
    
    // Apply the final transformation to the sample direction
    var finalRotation = Math.Multiply(yRotateMatrix, xRotateMatrix);
    sampleDirection = Math.MultiplyNormal(finalRotation, sampleDirection);
    
    // We want a larger LOD the smaller the resolution is
    var lod = 1.0 / Math.Length(this.TextureViewResolution) * 130.0;
    
    // Sample the final color
    this.Color = this.SpriteSource.SampleLod(sampleDirection, lod);
  }
}
