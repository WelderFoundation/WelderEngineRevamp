// MIT Licensed (see LICENSE.md).

// Data needed for rendering a spot light.
// Usage with DeferredRenderer expects a Model on this object with the
// 'SpotLight' or 'SpotLightShadows' Material and 'Sphere' Mesh.
// No default usage with ForwardRenderer.
[RunInEditor]
class SpotLight : ZilchComponent
{
  [Dependency] var Transform : Transform;
  
  // Color used in lighting calculations.
  [Property] var LightColor : Real4
  {
    get { return Real4(this.LightColorValue, 1.0); }
    set { this.LightColorValue = value.XYZ; }
  }
  
  // Combined with area light falloff and represents total emittance of the light.
  [Property][ShaderInput("SpotLightFragment")] var LightIntensity : Real
  {
    get { return this.LightIntensityValue; }
    set { this.LightIntensityValue = Math.Max(value, 0.0); }
  }
  
  // Distance at which the light's effect is completely faded.
  // Does not affect apparent brightness of the light.
  [Property][ShaderInput("SpotLightFragment")] var FalloffRadius : Real
  {
    get { return this.FalloffRadiusValue; }
    set
    {
      this.FalloffRadiusValue = Math.Max(value, 0.1);
      this.SetLightRadiusInput();
      // Don't have access to other components in serialization.
      if (this.Transform != null)
        this.Transform.WorldScale = Real3(this.FalloffRadiusValue * 2.0);
      
      if (this.Owner != null && this.Owner.Camera != null)
        this.Owner.Camera.FarPlane = this.FalloffRadiusValue;
    }
  }
  
  // Physical radius of the sphere of light.
  // Affects the shape of specular reflection.
  [Property] var LightRadius : Real
  {
    get { return this.LightRadiusValue; }
    set
    {
      this.LightRadiusValue = Math.Max(value, 0.0);
      this.SetLightRadiusInput();
    }
  }
  
  // Angle at which the penumbra falloff begins.
  // Lighting within this angle is identical to a point light.
  [Property] var InnerAngle : Real
  {
    get { return this.InnerAngleValue; }
    set
    {
      this.InnerAngleValue = Math.Clamp(value, 10.0, 170.0);
      this.SetSpotAngles();
    }
  }
  
  // Angle at which the penumbra falloff ends.
  // Lighting will not be applied beyond this angle.
  [Property] var OuterAngle : Real
  {
    get
    {
      return this.OuterAngleValue;
    }
    set
    {
      this.OuterAngleValue = Math.Clamp(value, 10.0, 170.0);
      this.SetSpotAngles();
      
      if (this.Owner != null && this.Owner.Camera != null)
        this.Owner.Camera.FieldOfView = this.OuterAngleValue;
    }
  }
  
  [ShaderInput("SpotLightFragment", "LightRadius")] var LightRadiusInput : Real;
  [ShaderInput("SpotLightFragment")] var LightDirection : Real3;
  [ShaderInput("SpotLightFragment")] var SpotAngles : Real2;
  [ShaderInput("LightPass", "LightColor")] var LightColorValue : Real3 = Real3(1.0);
  
  var LightIntensityValue : Real = 20.0;
  var FalloffRadiusValue : Real = 10.0;
  var LightRadiusValue : Real = 0.0;
  var InnerAngleValue : Real = 45.0;
  var OuterAngleValue : Real = 60.0;
  
  function Initialize(init : CogInitializer)
  {
    this.LightDirection = Math.Normalize(this.Transform.TransformNormal(-Real3.ZAxis));
    this.Transform.WorldScale = Real3(this.FalloffRadiusValue * 2.0);
    this.SetLightRadiusInput();
    this.SetSpotAngles();
    Zero.Connect(this.Owner, Events.TransformUpdated, this.OnTransformUpdated);
  }
  
  function OnTransformUpdated(event : ObjectEvent)
  {
    this.LightDirection = Math.Normalize(this.Transform.TransformNormal(-Real3.ZAxis));
  }
  
  function SetLightRadiusInput()
  {
    this.LightRadiusInput = Math.Min(this.LightRadiusValue, this.FalloffRadius);
  }
  
  function SetSpotAngles()
  {
    var innerAngle = Math.ToRadians(Math.Min(this.InnerAngleValue, this.OuterAngleValue));
    var outerAngle = Math.ToRadians(this.OuterAngleValue);
    
    var cosInner = Math.Cos(innerAngle * 0.5);
    var cosOuter = Math.Cos(outerAngle * 0.5);
    this.SpotAngles = Real2(cosOuter, cosInner - cosOuter);
  }

  function DebugDraw()
  {
    var innerAngle = Math.ToRadians(Math.Min(this.InnerAngleValue, this.OuterAngleValue));
    var outerAngle = Math.ToRadians(this.OuterAngleValue);
    
    var color = Real4(1.0, 1.0, 0.0, 1.0);
    var colorDark = Real4(0.5, 0.5, 0.0, 1.0);
    
    var position = this.Transform.WorldTranslation;
    var direction = Math.Normalize(this.Transform.TransformNormal(-Real3.ZAxis));
    
    DebugDraw.Add(DebugSphere(position, this.LightRadiusInput) {Color = colorDark});
    
    DebugDraw.Add(DebugLine(position, position + direction * 5.0, 1.0) {Color = color});
    
    var angleRotation = Math.Normalize(this.Transform.TransformNormal(Real3.XAxis));
    var dirInnerA = Math.RotateVector(direction, angleRotation, innerAngle * 0.5);
    var dirInnerB = Math.RotateVector(direction, angleRotation, innerAngle * -0.5);
    var dirOuterA = Math.RotateVector(direction, angleRotation, outerAngle * 0.5);
    var dirOuterB = Math.RotateVector(direction, angleRotation, outerAngle * -0.5);
    
    var rotateAxis = Math.Normalize(this.Transform.TransformNormal(Real3.ZAxis));
    var rotateAngle = Math.Pi * 0.25;
    
    for (var i = 0; i < 4; ++i)
    {
      var innerA = position + dirInnerA * this.FalloffRadius;
      var innerB = position + dirInnerB * this.FalloffRadius;
      var outerA = position + dirOuterA * this.FalloffRadius;
      var outerB = position + dirOuterB * this.FalloffRadius;
      
      DebugDraw.Add(DebugLine(position, innerA) {Color = colorDark});
      DebugDraw.Add(DebugLine(position, innerB) {Color = colorDark});
      DebugDraw.Add(DebugLine(position, outerA) {Color = color});
      DebugDraw.Add(DebugLine(position, outerB) {Color = color});
      
      DebugDraw.Add(DebugArc(outerA, position + direction * this.FalloffRadius, outerB) {Color = color});
      
      dirInnerA = Math.RotateVector(dirInnerA, rotateAxis, rotateAngle);
      dirInnerB = Math.RotateVector(dirInnerB, rotateAxis, rotateAngle);
      dirOuterA = Math.RotateVector(dirOuterA, rotateAxis, rotateAngle);
      dirOuterB = Math.RotateVector(dirOuterB, rotateAxis, rotateAngle);
    }
    
    var innerRadius = Math.Sin(innerAngle * 0.5) * this.FalloffRadius;
    var innerCenter = Math.Cos(innerAngle * 0.5) * this.FalloffRadius;
    var outerRadius = Math.Sin(outerAngle * 0.5) * this.FalloffRadius;
    var outerCenter = Math.Cos(outerAngle * 0.5) * this.FalloffRadius;
    
    DebugDraw.Add(DebugCircle(position + direction * innerCenter, direction, innerRadius) {Color = colorDark});
    DebugDraw.Add(DebugCircle(position + direction * outerCenter, direction, outerRadius) {Color = color});
  }
}
