// MIT Licensed (see LICENSE.md).

// Perturbes the view normal using normals stored in texture space.
[Pixel]
struct NormalMap
{
  [FragmentInput][StageInput] var Uv : Real2;
  
  [FragmentInput][StageInput][Output] var ViewNormal : Real3;
  [StageInput] var ViewTangent : Real3;
  [StageInput] var ViewBitangent : Real3;
  
  [Input] var NormalMap : SampledImage2d;
  [Input] var Bumpiness : Real = 1.0;
  
  // Zero generates tangents/bitangents in the increasing u/v directions
  // Normal maps are assumed to use increasing red/green for the right/up directions
  // If a normal map is authored differently, these properties will invert
  // the respective axis so that surfaces point in the correct direction
  [Input] var RedLeft : Boolean = false;
  [Input] var GreenDown : Boolean = false;

  function Main()
  {
    // Normalize basis vectors
    var normal = Math.Normalize(this.ViewNormal);
    var tangent = Math.Normalize(this.ViewTangent);
    var bitangent = Math.Normalize(this.ViewBitangent);
    
    // Remap sample from [0, 1] to [-1, 1]
    var normalSample = this.NormalMap.Sample(this.Uv).XY;
    // Does not exactly map to +/-1, but we want byte values of 128 to exactly map to 0
    normalSample = (normalSample - Real2(128.0 / 255.0)) * 2.0;

    // Invert tangent directions if needed
    var xSign = Math.Lerp(1.0, -1.0, this.RedLeft as Real);
    var ySign = Math.Lerp(-1.0, 1.0, this.GreenDown as Real);

    // Add tangent directions to perturb the surface normal
    normal += (tangent * normalSample.X * xSign + bitangent * normalSample.Y * ySign) * this.Bumpiness;
    this.ViewNormal = Math.Normalize(normal);
  }
}
