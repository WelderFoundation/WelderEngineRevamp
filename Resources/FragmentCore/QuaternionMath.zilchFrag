// MIT Licensed (see LICENSE.md).

struct QuaternionMathImplements
{
  [Static][Extension(typeid(Math))][Implements]
  function Dot(lhs : Quaternion, rhs : Quaternion) : Real
  {
    return Math.Dot(lhs.XYZW, rhs.XYZW);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function AngleBetween(lhs : Quaternion, rhs : Quaternion) : Real
  {
    var dot = Math.Dot(lhs, rhs);
    dot = Math.Clamp(dot, -1.0, 1.0);
    // quaternions are a 2-1 mapping, so we could get a rotation that is 400 degrees
    // instead of 40 degrees, to fix this we can simply abs the dot product. This works
    // out because we convert our initial [0,360] range to [0,180] then scale up by 2 (2-1 mapping).
    var correctedDot = Math.Abs(dot);
    var angle = 2.0 * Math.ACos(correctedDot);
    return angle;
  }
  
  [Static][Extension(typeid(Math))]
  function Conjugate(value : Quaternion) : Quaternion
  {
    return Quaternion(-value.XYZ, value.W);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Length(value : Quaternion) : Real
  {
    return Math.Length(value.XYZW);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function LengthSq(value : Quaternion) : Real
  {
    return Math.LengthSq(value.XYZW);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Normalize(value : Quaternion) : Quaternion
  {
    var r4 = Math.Normalize(value.XYZW);
    return Quaternion(r4.X, r4.Y, r4.Z, r4.W);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Multiply(by : Quaternion, the : Quaternion) : Quaternion
  {
    var w = by.W * the.W - Math.Dot(by.XYZ, the.XYZ);
    var v3 = by.W * the.XYZ + the.W * by.XYZ + Math.Cross(by.XYZ, the.XYZ);
    return Quaternion(v3, w);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Multiply(by : Quaternion, the : Real3) : Real3
  {
    var promotedVector = Quaternion(the, 0.0);
    var conjugate = Math.Conjugate(by);
    var rotationResult = Math.Multiply(Math.Multiply(by, promotedVector), conjugate);
    return rotationResult.XYZ;
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Invert(value : Quaternion) : Quaternion
  {
    var result = Math.Conjugate(value);
    var lengthSq = Math.LengthSq(value);
    
    var r4 = result.XYZW / lengthSq;
    return Quaternion(r4.X, r4.Y, r4.Z, r4.W);
  }
  
  // Generates the quaternion that rotates from 'start' to 'end'.
  [Static][Extension(typeid(Math))][Implements]
  function RotationQuaternionBetween(start : Real3, end : Real3) : Quaternion
  {
    // Normalize both quaternions to ensure accuracy
    start = Math.Normalize(start);
    end = Math.Normalize(end);
    
    // Find the axis to rotate about
    var axis = Math.Cross(start, end);
    // The length of this axis is sin(theta). If there was no valid
    // axis then fallback on the identity quaternion.
    var length = Math.Length(axis);
    if(length == 0)
      return Quaternion.Identity;
    
    // Get a normalized axis to rotate about
    axis = Math.Normalize(axis);
    // Compute the angle of rotation and generate the quaternion from the axis angle
    var dot = Math.Dot(start, end);
    var angle = Math.ACos(dot);
    return Math.ToQuaternion(axis, angle);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function Slerp(start : Quaternion, end : Quaternion, tValue : Real) : Quaternion
  {
    //
    // Quaternion Interpolation With Extra Spins, pp. 96f, 461f
    // Jack Morrison, Graphics Gems III, AP Professional
    //

    var startR4 = start.XYZW;
    var endR4 = end.XYZW;
    var cosTheta = Math.Dot(startR4, endR4);

    // Check to ensure that the shortest path is taken (cosine of the angle between 
    // the two quaternions is positive).
    var flip = cosTheta < 0.0;
    if(flip)
    {
      cosTheta = -cosTheta;
    }

    var startVal = 0.0;
    var endVal = 0.0;
    var cSlerpEpsilon = 0.00001;
    if((1.0 - cosTheta) > cSlerpEpsilon)
    {
      var theta = Math.ACos(cosTheta);
      var sinTheta = Math.Sin(theta);
      startVal = Math.Sin((1.0 - tValue) * theta);
      endVal = Math.Sin(tValue * theta);
      startVal /= sinTheta;
      endVal /= sinTheta;
    }
    else
    {
      startVal = 1.0 - tValue;
      endVal = tValue;
    }

    if(flip)
    {
      endVal = -endVal;
    }

    var resultR4 = startVal * startR4 + endVal * endR4;
    return Quaternion(resultR4.X, resultR4.Y, resultR4.Z, resultR4.W);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function AxisAngle(axis : Real3, radians : Real) : Quaternion
  {
    var alpha = radians * 0.5;
    var sinAlpha = Math.Sin(alpha);
    var result = Quaternion(axis * sinAlpha, Math.Cos(alpha));
    return result;
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function ToQuaternion(axis : Real3, radians : Real) : Quaternion
  {
    return Math.AxisAngle(axis, radians);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function ToReal3x3(rotation : Quaternion) : Real3x3
  {
    //     |       2     2                                |
    //     | 1 - 2Y  - 2Z    2XY - 2ZW      2XZ + 2YW     |
    //     |                                              |
    //     |                       2     2                |
    // M = | 2XY + 2ZW       1 - 2X  - 2Z   2YZ - 2XW     |
    //     |                                              |
    //     |                                      2     2 |
    //     | 2XZ - 2YW       2YZ + 2XW      1 - 2X  - 2Y  |
    //     |                                              |
    var xx = rotation.X * rotation.X;
    var xy = rotation.X * rotation.Y;
    var xz = rotation.X * rotation.Z;
    var yy = rotation.Y * rotation.Y;
    var yz = rotation.Y * rotation.Z;
    var zz = rotation.Z * rotation.Z;
    var zw = rotation.Z * rotation.W;
    var yw = rotation.Y * rotation.W;
    var xw = rotation.X * rotation.W;
    
    var result = Real3x3();
    result.M00 = 1.0 - 2.0 * (yy + zz);
    result.M01 = 2.0 * (xy - zw);
    result.M02 = 2.0 * (xz + yw);
    
    result.M10 = 2.0 * (xy + zw);
    result.M11 = 1.0 - 2.0 * (xx + zz);
    result.M12 = 2.0 * (yz - xw);
    
    result.M20 = 2.0 * (xz - yw);
    result.M21 = 2.0 * (yz + xw);
    result.M22 = 1.0 - 2.0 * (xx + yy);
    return result;
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function ToQuaternion(facing : Real3, up : Real3) : Quaternion
  {
    var r3x3 = Math.ToReal3x3(facing, up);
    return Math.ToQuaternion(r3x3);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function ToQuaternion(facing : Real3, up : Real3, right : Real3) : Quaternion
  {
    var r3x3 = Math.ToReal3x3(facing, up, right);
    return Math.ToQuaternion(r3x3);
  }
  
  [Static][Extension(typeid(Math))][Implements]
  function ToQuaternion(matrix : Real3x3) : Quaternion
  {
    var r4Result = Real4();
    if(matrix.M00 + matrix.M11 + matrix.M22 > 0.0)
    {
      var t = matrix.M00 + matrix.M11 + matrix.M22 + 1.0;
      var s = Math.RSqrt(t) * 0.5;

      r4Result[3] = s * t;
      r4Result[2] = (matrix.M10 - matrix.M01) * s;
      r4Result[1] = (matrix.M02 - matrix.M20) * s;
      r4Result[0] = (matrix.M21 - matrix.M12) * s;
    }
    else if(matrix.M00 > matrix.M11 && matrix.M00 > matrix.M22)
    {
      var t = matrix.M00 - matrix.M11 - matrix.M22 + 1.0;
      var s = Math.RSqrt(t) * 0.5;

      r4Result[0] = s * t;
      r4Result[1] = (matrix.M10 + matrix.M01) * s;
      r4Result[2] = (matrix.M02 + matrix.M20) * s;
      r4Result[3] = (matrix.M21 - matrix.M12) * s;
    }
    else if(matrix.M11 > matrix.M22)
    {
      var t = -matrix.M00 + matrix.M11 - matrix.M22 + 1.0;
      var s = Math.RSqrt(t) * 0.5;
      
      r4Result[1] = s * t;
      r4Result[0] = (matrix.M10 + matrix.M01) * s;
      r4Result[3] = (matrix.M02 - matrix.M20) * s;
      r4Result[2] = (matrix.M21 + matrix.M12) * s;
    }
    else
    {
      var t = -matrix.M00 - matrix.M11 + matrix.M22 + 1.0;
      var s = Math.RSqrt(t) * 0.5;

      r4Result[2] = s * t;
      r4Result[3] = (matrix.M10 - matrix.M01) * s;
      r4Result[0] = (matrix.M02 + matrix.M20) * s;
      r4Result[1] = (matrix.M21 + matrix.M12) * s;
    }
    return Quaternion(r4Result.X, r4Result.Y, r4Result.Z, r4Result.W);
  }
}
