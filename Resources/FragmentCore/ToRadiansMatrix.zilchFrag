// MIT Licensed (see LICENSE.md).

struct MathToRadiansMatrixImplements
{
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real2x2) : Real2x2
  {
    var result = Real2x2();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real2x3) : Real2x3
  {
    var result = Real2x3();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real2x4) : Real2x4
  {
    var result = Real2x4();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real3x2) : Real3x2
  {
    var result = Real3x2();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    result[2] = Math.ToRadians(degrees[2]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real3x3) : Real3x3
  {
    var result = Real3x3();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    result[2] = Math.ToRadians(degrees[2]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real3x4) : Real3x4
  {
    var result = Real3x4();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    result[2] = Math.ToRadians(degrees[2]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real4x2) : Real4x2
  {
    var result = Real4x2();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    result[2] = Math.ToRadians(degrees[2]);
    result[3] = Math.ToRadians(degrees[3]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real4x3) : Real4x3
  {
    var result = Real4x3();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    result[2] = Math.ToRadians(degrees[2]);
    result[3] = Math.ToRadians(degrees[3]);
    return result;
  }
  [Static][Extension(typeid(Math))][Implements]
  function ToRadians(degrees : Real4x4) : Real4x4
  {
    var result = Real4x4();
    result[0] = Math.ToRadians(degrees[0]);
    result[1] = Math.ToRadians(degrees[1]);
    result[2] = Math.ToRadians(degrees[2]);
    result[3] = Math.ToRadians(degrees[3]);
    return result;
  }
}
