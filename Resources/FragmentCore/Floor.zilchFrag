// MIT Licensed (see LICENSE.md).

struct MathFloorPlacesImplements
{
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real, places : Integer) : Real
  {
    return Math.Floor(value, places, 10);
  }
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real2, places : Integer) : Real2
  {
    return Math.Floor(value, places, 10);
  }
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real3, places : Integer) : Real3
  {
    return Math.Floor(value, places, 10);
  }
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real4, places : Integer) : Real4
  {
    return Math.Floor(value, places, 10);
  }
}
struct MathFloorPlacesBaseImplements
{
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real, places : Integer, numericalBase : Integer) : Real
  {
    var scale = Math.Pow(numericalBase, places);
    return Math.Floor(value / scale) * scale;
  }
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real2, places : Integer, numericalBase : Integer) : Real2
  {
    var scale = Math.Pow(numericalBase, places);
    return Math.Floor(value / scale) * scale;
  }
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real3, places : Integer, numericalBase : Integer) : Real3
  {
    var scale = Math.Pow(numericalBase, places);
    return Math.Floor(value / scale) * scale;
  }
  [Static][Extension(typeid(Math))][Implements]
  function Floor(value : Real4, places : Integer, numericalBase : Integer) : Real4
  {
    var scale = Math.Pow(numericalBase, places);
    return Math.Floor(value / scale) * scale;
  }
}
