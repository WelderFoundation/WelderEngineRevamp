// MIT Licensed (see LICENSE.md).

// Event structure referencing which cog needs to switch from/to undo/redo
// views and vice verse.
class ChangedHistoryView : ZilchEvent
{
  var HistoryEntry : Cog;
}

// Controller for all functionlity related to a history entry row.
class ZUiHistoryEntry : ZilchComponent
{
  [Dependency] var UiWidget : UiWidget;
  
  var SingleIndent : Integer = 20;
  
    // Denotes the current parent and undone state.
  var IsUndone : Boolean = false;
  
    // Current expand/collapse state.
  var IsExpanded : Boolean;
  
  var IsHighlighted : Boolean;
  
    // If this HistoryEntry has ancestors, then 'RootHistoryEntry' will point
    // to the root of the hierarchy containing this HistoryEntry.
  var RootHistoryEntry : ZUiHistoryEntry = null;
  
    // Associated views, depending on this entry's undo/redo state.
  var UndoView : Cog = null;
  var RedoView : Cog = null;
  
    // Different cogs composing a single history row.
  var Icon : Cog;
  var HistoryInfo : Cog;
  var RowName : Cog;
  var ChildContainer : Cog;
  
  var UiOriginalSize : Real2;
  var UiOriginalColor : Real4;
  
    // Data for the operation that needs to be undone/redone.
  var OperationData : Operation;
    // Display for OperationData description
  var ToolTip : UiLegacyToolTip = UiLegacyToolTip();
  
  var ExpandArrow : SpriteSource = SpriteSource.HistoryArrowRight;
  var CollapseArrow : SpriteSource = SpriteSource.HistoryArrowDown;
  
    // Owning cog is of this archetype.
  [Property] var ArchetypeEntry : Archetype = Archetype.HistoryEntry;
    // Highlight color used when the mouse enters the hierarchy of this entry.
  [Property] var HighlightColor : Real4;
    // Animation time used for sizing.
  [Property] var AnimateTime : Real = 0.2;
  
  
  sends OperationUndone : ChangedHistoryView;
  sends OperationRedone : ChangedHistoryView;
  sends HistoryEntryUpdate : ZilchEvent;
  
  
  function Initialize(init : CogInitializer)
  {
    this.IsExpanded = false;
    this.IsHighlighted = false;
    
    this.HistoryInfo = this.Owner.Children.Current;
    this.Icon = this.HistoryInfo.FindChildByName("Icon");
    this.RowName = this.HistoryInfo.FindChildByName("Text");
    this.ChildContainer = this.Owner.FindChildByName("Children");
    
    this.UiOriginalSize = this.UiWidget.Size;
    
    Zero.Connect(this.Owner, Events.Attached, this.OnAttached);
    
      // No way to tell which history entry rows are children to other history
      // entry rows.  So for now, connect them all to mouse enter/exit.
    Zero.Connect(this.Owner, Events.MouseEnterHierarchy, this.OnMouseEnterHierarchy);
    Zero.Connect(this.Owner, Events.MouseExitHierarchy, this.OnMouseExitHierarchy);
    
      // Each history entry has the potential to spawn a tooltip.
    Zero.Connect(this.HistoryInfo, Events.MouseEnterHierarchy, this.OnMouseEnter);
    Zero.Connect(this.HistoryInfo, Events.MouseExitHierarchy, this.OnMouseExit);
    
    Zero.Connect(this.Icon, Events.LeftMouseUp, this.OnLeftClickExpand);
    Zero.Connect(this.RowName, Events.LeftMouseUp, this.OnLeftMouseUp);
  }
  
  // Stand in for 'Initialize' of potential parent(s).
  function OnAttached(event : HierarchyEvent)
  {
      // Cannot be done in 'Initialize' as 'OperationData' is not valid, yet.
    if(!this.OperationData.Children.IsNotEmpty)
      this.Icon.UiWidget.Visible = false;

      // Already initialized.
    if(this.UndoView != null)
      return;
      
    if(this.RootHistoryEntry != null)
    {
      this.UndoView = this.RootHistoryEntry.UndoView;
      this.RedoView = this.RootHistoryEntry.RedoView;
    }
    else
    {
      this.UndoView = this.Owner.FindRoot().FindChildByName("UndoView");
      this.RedoView = this.Owner.FindRoot().FindChildByName("RedoView");
    }
    
    this.Owner.DispatchUp(Events.HistoryEntryUpdate, ZilchEvent());
  }
  
  // If this operation is a batch then create children rows for all operations
  // in this batch.
  function CreateChildrenEntries() : Integer
  {
      // Don't create the children if they are already present.
    if(this.ChildContainer.Children.IsNotEmpty)
      return 0;
    
    var childCount = 0;
    foreach(var operation in this.OperationData.Children)
    {
      ++childCount;
      
      var entry = this.Space.Create(this.ArchetypeEntry);
      var entryManager = entry.ZUiHistoryEntry;
      
        // Find the root HistoryEntry of the hierarchy this new entry will be in.
      var root = this;
      while(root != null)
      {
        entryManager.RootHistoryEntry = root;
        root = root.RootHistoryEntry;
      }
      
        // Highlight all of our new child rows, because we are currently highlighted.
      entryManager.UpdateColor(this.HighlightColor, true);
      
        // Children entries are not allowed to be the autority with respect to
        // hierarchical-highlighting on mouse enter/exit.  So disconnect these events.
      Zero.Disconnect(entry, Events.MouseEnterHierarchy, entry.ZUiHistoryEntry);
      Zero.Disconnect(entry, Events.MouseExitHierarchy, entry.ZUiHistoryEntry);
      
        // Indent the new entry content.
      var parentIndent = this.Owner.Children.Current.UiStackLayout.PaddingLeft;
      entry.Children.Current.UiStackLayout.PaddingLeft = parentIndent + this.SingleIndent;
      
        // Set the rest of the data for this entry.
      entryManager.OperationData = operation;
      //entryManager.HistoryInfo.Name = operation.Name;
      entryManager.RowName.SpriteText.Text = operation.Name;
      
      entry.AttachToPreserveLocal(this.ChildContainer);
    }

    return childCount;
  }
  
  // Remove all children rows.
  function DestroyChildrenEntries()
  {
    foreach(var child in this.ChildContainer.Children)
    {
      child.Destroy();
    }
    
  }
  
  // Change this row's parent depending on its undone state.
  function ChangeHistoryView(moveToRedoView : Boolean, dispatcher : Cog, eventName: String)
  {
    this.IsUndone = moveToRedoView;
    this.Owner.DetachPreserveLocal();
    
    var changedViewEvent = ChangedHistoryView();
    changedViewEvent.HistoryEntry = this.Owner;
    
    dispatcher.DispatchEvent(eventName, changedViewEvent);
  }
  
  // Highlight entry row.
  function OnMouseEnterHierarchy(event : ViewportMouseEvent)
  {
    this.UpdateHierarchyColor(this.HighlightColor, true);
    
    event.HandledEvent = true;
  }
  
  // Un-highlight entry row.
  function OnMouseExitHierarchy(event : ViewportMouseEvent)
  {
    this.OriginalHierarchyColor();
    
    event.HandledEvent = true;
  }
  
  // Spawn a tooltip next to the history row if there is any extra info to display.
  function OnMouseEnter(event : ViewportMouseEvent)
  {
    var op = this.OperationData as PropertyOperation;
    if(op == null)
      return;
      
    var localRect = this.UiWidget.WorldRectangle;
    var rootRect = this.UiWidget.Root;
    
    localRect.TopLeft = Real2(rootRect.LocalTopLeft.X, localRect.TopLeft.Y);
    localRect.BottomRight = Real2(rootRect.LocalBottomRight.X, localRect.BottomRight.Y);
    
    this.ToolTip = UiLegacyToolTip();
    this.ToolTip.SetPlacement(event.CameraViewport, localRect);
    
    if(ZUiOperationHistoryToolTip.Fill(this.ToolTip, op) == false)
      delete this.ToolTip;
  }
  
  // Destroy this row's tooltip - if there is one.
  function OnMouseExit(event : ViewportMouseEvent)
  {
    delete this.ToolTip;
  }
  
  // Excute undo/redo command.
  function OnLeftMouseUp(event : ViewportMouseEvent)
  {
    var targetEntry = this;
    if(this.RootHistoryEntry != null)
      targetEntry = this.RootHistoryEntry;
        
    if(targetEntry.IsUndone)
    {
      var operationValid = Zero.Editor.OperationQueue.Redo(targetEntry.OperationData);
      if(!operationValid)
        return;
      
      foreach(var cog in this.RedoView.ChildrenArray)
      {
        var entry = cog.ZUiHistoryEntry;
        entry.ChangeHistoryView(false, entry.UndoView, Events.OperationRedone);
        
          // Redo all operations up to AND including the target entry.
        if(entry == targetEntry)
          return;
      }

    }
    else
    {
      var reverseArray  = this.UndoView.ChildrenReversedArray;
      
        // Undo the target entry if (and only if) every entry after the target is already undone.
      if(reverseArray.First == targetEntry.Owner)
      {
        Zero.Editor.OperationQueue.Undo();
        return; 
      }
      
      var operationValid = Zero.Editor.OperationQueue.Undo(targetEntry.OperationData);
      if(!operationValid)
        return;
      
      foreach(var cog in reverseArray)
      {
        var entry = cog.ZUiHistoryEntry;
        
          // Undo all operations up to, but NOT including the target/clicked entry.
        if(entry == targetEntry)
          return;
        
        entry.ChangeHistoryView(true, entry.RedoView, Events.OperationUndone);
        
      }
      
    }
    
  }

  // Resize this row to display the children rows of this batch.
  function OnLeftClickExpand(event : ViewportMouseEvent)
  {
    if(!this.Icon.UiWidget.Visible)
      return;
    
    if(!this.IsExpanded)
    {
      this.IsExpanded = true;
      this.Icon.Sprite.SpriteSource = this.CollapseArrow;
      
      var childCount = this.CreateChildrenEntries();
      
      this.Owner.Actions.Cancel();
      var seq = this.AnimateSize(childCount * this.UiOriginalSize.Y);
      Action.Call(seq, this.AfterExpand);
    }
    else
    {
      this.IsExpanded = false;
      this.Icon.Sprite.SpriteSource = this.ExpandArrow;
      
      this.UiWidget.SizePolicyY = UiSizePolicy.Fixed;
      
      this.Owner.Actions.Cancel();
      var seq = this.AnimateSize(0);
      Action.Call(seq, this.AfterCollapse);
    }
    
    event.HandledEvent = true;
  }
  
  function AnimateSize(additionalSizeY : Real) : ActionSet
  {
    additionalSizeY += this.UiOriginalSize.Y;
    var size = Real2(this.UiOriginalSize.X, additionalSizeY);
    
    var seq = Action.Sequence(this.Owner.Actions);
    Action.Property(seq, @this.UiWidget.Size, size, this.AnimateTime, Ease.QuadOut);
    
    return seq;
  }
  
  // Resizing helper.  Let the UI determine the size of this row.
  function AfterExpand()
  {
    this.UiWidget.SizePolicyY = UiSizePolicy.Auto;
  }
  
  // Cleanup helper.
  function AfterCollapse()
  {
    this.DestroyChildrenEntries();
  }
  
  // Sets the base color the row should be without modifications such as highlight.
  function SetRowColor(color : Real4)
  {
    this.UiOriginalColor = color;
    
      // Do not update to a new base color if this entry is highlighted.  The
      // highlight color needs to stay active in this case.
    if(!this.IsHighlighted)
      this.UpdateColor(color, false);
  }
  
  // Change the color of this row, but not the children rows.
  function UpdateColor(color : Real4, highlight : Boolean)
  {
    this.IsHighlighted = highlight;
    this.HistoryInfo.UiWidget.LocalColor = color;
  }
  
  // Recursively change the color of this row and its hierarchy to the same color.
  function UpdateHierarchyColor(color : Real4, highlight : Boolean)
  {
    this.UpdateColor(color, highlight);
    
    foreach(var row in this.ChildContainer.Children)
      row.ZUiHistoryEntry.UpdateHierarchyColor(color, highlight);
  }
  
  // Recursively restore the color of this row and all rows its hierarchy to their
  // respective original color.
  function OriginalHierarchyColor()
  {
    this.UpdateColor(this.UiOriginalColor, false);

    foreach(var row in this.ChildContainer.Children)
      row.ZUiHistoryEntry.OriginalHierarchyColor();
  }
  
}
