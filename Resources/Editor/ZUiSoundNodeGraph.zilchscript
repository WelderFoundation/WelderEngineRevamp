// MIT Licensed (see LICENSE.md).

class ZUiSoundNodeGraph : ZilchComponent
{
  [Dependency] var Capture : MouseCapture;
  [Dependency] var Transform : Transform;
  
  var ObjectList : Array[Cog] = Array[Cog]();
  var WaitFrames : Integer = 20;
  var FrameCount : Integer = 0;
  var SelectedID : Integer = -1;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner.Parent, Events.LeftMouseDown, this.OnMouseDown);
    Zero.Connect(this.Owner, Events.LeftMouseUp, this.OnMouseUp);
    Zero.Connect(this.Owner, Events.MouseDragMove, this.OnMouseMove);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    ++this.FrameCount;
    
    if (this.FrameCount >= this.WaitFrames)
    {
      this.FrameCount = 0;
      this.RefreshGraph();
    }
  }
  
  function OnMouseDown(event : ViewportMouseEvent)
  {
    this.Capture.Capture(event);
    if (event.HitObject.Name == "SoundGraphWindow")
      this.SelectedID = -1;
  }
  
  function OnMouseUp(event : ViewportMouseEvent)
  {
    this.Capture.ReleaseCapture(event);
  }
  
  function OnMouseMove(event : ViewportMouseEvent)
  {
    var position = this.Owner.UiWidget.LocalTranslation;
    position.X += event.Movement.X;
    position.Y -= event.Movement.Y;
    this.Owner.UiWidget.LocalTranslation = position;
  }
  
  function RefreshGraph()
  {
    // Remove any existing node objects
    foreach(var object in this.ObjectList)
      object.Destroy();
    this.ObjectList.Clear();
    
    if (this.Space.MarkedForDestruction == true)
      return;
    
    var nodeSize = Real3(78, 28, 0);
    var offset = Real3(50,50,0);
    
    foreach(var info in Zero.Audio.GetNodeGraphInfo())
    {
      var thisPosition = Real3(info.Position, 1) + offset;
      
      var color = Real4(0.4118, 0.698, 1.0, 1.0);
      if (info.Name == "Space")
          color = Real4(1.0, 0.2431, 0.247, 1.0);
      else if (info.Name == "Listener")
          color = Real4(0.6706, 0.4118, 1.0, 1.0);
      else if (info.Name == "Emitter")
          color = Real4(0.1804, 0.6667, 0.1686, 1.0);
      else if (info.Name == "SoundInstance")
          color = Real4(1.0, 0.6549, 0.2941, 1.0);
      else if (info.Name == "EmitterAttenuator")
          color = Real4(0.6078, 1.0, 0.4706, 1.0);
      else if (info.Name == "CueAttenuator")
          color = Real4(0.9961, 0.9255, 0.4588, 1.0);
      else if (info.Name == "AudioOutput")
          color = Real4(0.4157, 0.2118, 0.2118, 1.0);
      
      var node = this.Space.CreateAtPosition(Archetype.SoundNodeIcon, thisPosition - nodeSize * 0.5);
      node.ZUiSoundNodeIcon.ID = info.ID;
      node.FindChildByName("CircleHighlight").UiWidget.LocalColor = color;
      node.FindChildByName("BoxHighlight").UiWidget.LocalColor = color;
      node.FindChildByName("Text").SpriteText.Text = info.Name;
      node.AttachToPreserveLocal(this.Owner);
      
      this.ObjectList.Push(node);
        
      // Add the connection lines
      foreach(var otherInfo in info.Connections)
      {        
        var otherPosition = Real3(otherInfo.Position.X, otherInfo.Position.Y + 47, 0) + offset;
                
        var line = this.Space.CreateAtPosition(Archetype.SoundNodeLine, thisPosition + Real3(0,-23,-1));
        if (otherInfo.ID == this.SelectedID || info.ID == this.SelectedID)
          line.UiWidget.LocalColor = Real4(1, 1, 1, 1.0);
        else if (info.HasOutput == true)
          line.UiWidget.LocalColor = Real4(0.9098, 0.4902, 0.0, 1.0);
        line.AttachToPreserveLocal(this.Owner);
        this.ObjectList.Push(line);
        
        var distance = otherPosition - thisPosition;
        line.Transform.Scale = Real3(1,Math.Distance(thisPosition, otherPosition),1);
        line.Transform.RotateAnglesWorld(Real3(0.0,0.0, -Math.ATan2(distance.X, distance.Y)));
      }
    }
  }
}

class ZUiSoundNodeIcon : ZilchComponent
{
  var ID : Integer = -1;
  
  function Initialize(init : CogInitializer)
  {    
    Zero.Connect(this.Owner, Events.LeftMouseDown, this.OnMouseDown);
  }
  
  function OnMouseDown(event : ViewportMouseEvent)
  {
    this.Owner.Parent.ZUiSoundNodeGraph.SelectedID = this.ID;
  }
}
