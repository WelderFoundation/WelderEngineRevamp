// MIT Licensed (see LICENSE.md).

// Main operation history script-side manager.
class ZUiOperationHistory : ZilchComponent
{
  [Dependency] var UiWidget : UiWidget;
  
  [Property] var StatusText : CogPath;
  [Property] var UndoView : CogPath;
  [Property] var RedoView : CogPath;
  [Property] var ScrollBar : CogPath;
  
  var EntryCount : Integer = 0;
  
  var IntendedScrollBarSizeX : Real = 0.0;
  var CurrentScrollBarSizeX : Real = 0.0;
  
  var NextRowColor : Integer = 0;
  var RowColor : Array[Real4] = new Array[Real4]();
  
  var TotalViewLength : Real = 0.0;
  
  
  function Initialize(init : CogInitializer)
  {
      // Save original scrollbar-indicator thickness
    this.IntendedScrollBarSizeX = this.ScrollBar.Cog.UiWidget.Size.X;
    
      // Alternating histroy row colors.
    var color1 = 61.0/255.0;
    var color2 = 66.0/255.0;
    
    this.RowColor.Add(Real4(color1, color1, color1, 1));
    this.RowColor.Add(Real4(color2, color2, color2, 1));
    
    Zero.Connect(this.Owner, Events.HistoryEntryUpdate, this.OnEntryListUpdate);
    Zero.Connect(this.Owner.Parent, Events.AreaChanged, this.OnWindowResize);

    this.UpdateStatusText();
  }

  function GetNextRowColor() : Real4
  {
    var color = this.RowColor[this.NextRowColor];
    this.NextRowColor = (this.NextRowColor + 1) % 2;
    
    return color;
  }
  
  // Expects a number from 0 to 1.
  function SetVerticalScrollPosition(verticalScrollPercentage : Real)
  {
    if(verticalScrollPercentage < 0 || verticalScrollPercentage > 1) throw Exception("Expected a value between 0 and 1");
    
    var offset = Real2(0, verticalScrollPercentage * this.GetVerticalScrollDistance());
    this.UiWidget.LocalTranslation = offset;
  }
  
  function GetVerticalScrollDistance() : Real
  {
      // Total distance (on the Y-axis) the scrollbar indicator can travel.
    return Math.Max(0, this.TotalViewLength - this.UiWidget.Parent.Size.Y);
  }
  
  function RecursiveRowColorHelper(row : ZUiHistoryEntry)
  {
    ++this.EntryCount;
    row.SetRowColor(this.GetNextRowColor());
    
    foreach(var child in row.ChildContainer.Children)
      this.RecursiveRowColorHelper(child.ZUiHistoryEntry);
  }
  
  // Update the history row colors and size the view according to the number of rows.
  function OnEntryListUpdate(event : ZilchEvent)
  {
    this.EntryCount = 0;
    this.NextRowColor = 0;
    
    foreach(var row in this.UndoView.Cog.Children)
      this.RecursiveRowColorHelper(row.ZUiHistoryEntry);

    foreach(var row in this.RedoView.Cog.Children)
      this.RecursiveRowColorHelper(row.ZUiHistoryEntry);

    this.TotalViewLength = this.UndoView.Cog.UiWidget.Size.Y + this.RedoView.Cog.UiWidget.Size.Y;
      // Maintain room for the scrollbar on the x axis.
    this.UiWidget.Size = Real2(this.UiWidget.Parent.Size.X - this.CurrentScrollBarSizeX, this.TotalViewLength);
    
    this.UpdateStatusText();
  }
  
  function OnWindowResize(event : AreaEvent)
  {
    this.TotalViewLength = this.UndoView.Cog.UiWidget.Size.Y + this.RedoView.Cog.UiWidget.Size.Y;
      // Maintain room for the scrollbar on the x axis.
    this.UiWidget.Size = Real2(this.UiWidget.Parent.Size.X - this.CurrentScrollBarSizeX, this.TotalViewLength);
    
    this.UpdateStatusText();
  }
  
  // Update the size and position of the status text.
  function UpdateStatusText()
  {
      // A couple of useful handles.
    var statusCog = this.StatusText.Cog;
    var statusText = statusCog.SpriteText;
    
    if(this.EntryCount == 0)
    {
      statusCog.UiWidget.Active = true;
      statusCog.SpriteText.Visible = true;
    }
      // No longer necessary to display the status text.
    else if(this.EntryCount != 0)
    {
      statusCog.UiWidget.Active = false;
      statusCog.SpriteText.Visible = false;
      return;
    }
  }
  
  var ChildCount : Integer
  {
    get { return this.EntryCount; }
  }
  
  // Size of the current view vs. the required view size, if all history rows could be displayed.
  var ScrollRatio : Real
  {
    get
    {
      if(this.TotalViewLength <= this.UiWidget.Parent.Size.Y)
      {
          // scroll bar & well should not be visible
        this.CurrentScrollBarSizeX = 0.0;
        return 0.0;
      }
      
      this.CurrentScrollBarSizeX = this.IntendedScrollBarSizeX;
      return this.UiWidget.Parent.Size.Y / this.TotalViewLength;
    }
      
  }
  
}
