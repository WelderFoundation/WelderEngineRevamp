// MIT Licensed (see LICENSE.md).

// The first (given) buffer is blurred horizontally and written into a second buffer
// then the second is blurred vertically and written back into the first.
// The type parameter to this class should come from the Blur fragment file.
// For example, to use a separable blur with radius of 10 pixels, call:
//   BlurTexture[SeparableBlurRadius10].Call(event, target);
class BlurTexture[BlurFragmentType]
{
  [Static]
  function Call(event : RenderTasksEvent, target : RenderTarget)
  {
    var size = target.Texture.Size;
    var samplerSettings = SamplerSettings() {Filtering = target.Texture.Filtering};
    var target2 = event.GetRenderTarget(size, target.Texture.Format, samplerSettings);
    
    var blur = BlurFragmentType();
    blur.InverseTextureSize = Real2(1.0) / size;
    
    // Horizontal blur
    blur.Texture = target.Texture;
    blur.Vertical = false;
    event.AddRenderTaskPostProcess(target2, blur);
    
    // Vertical blur
    blur.Texture = target2.Texture;
    blur.Vertical = true;
    event.AddRenderTaskPostProcess(target, blur);
    
    target2.Release();
  }
}

// Same as BlurTexture except doesn't blur across edges that are too far apart based on depth values.
class BlurTextureEdgeSafe[BlurFragmentType]
{
  // depthThreshold is in world units.
  [Static]
  function Call(event : RenderTasksEvent, target : RenderTarget, geometryBuffer0 : RenderTarget, depthThreshold : Real, pixelStride : Real)
  {
    var size = target.Texture.Size;
    var samplerSettings = SamplerSettings() {Filtering = target.Texture.Filtering};
    var target2 = event.GetRenderTarget(size, target.Texture.Format, samplerSettings);
    
    var blur = BlurFragmentType();
    blur.InverseTextureSize = Real2(1.0) / size;
    blur.GeometryBuffer0 = geometryBuffer0.Texture;
    blur.DepthThreshold = depthThreshold;
    blur.PixelStride = pixelStride;
    
    // Horizontal blur
    blur.Texture = target.Texture;
    blur.Vertical = false;
    event.AddRenderTaskPostProcess(target2, blur);
    
    // Vertical blur
    blur.Texture = target2.Texture;
    blur.Vertical = true;
    event.AddRenderTaskPostProcess(target, blur);
    
    target2.Release();
  }
}
